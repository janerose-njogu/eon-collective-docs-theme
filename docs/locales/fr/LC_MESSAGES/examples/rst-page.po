# SOME DESCRIPTIVE TITLE.
# Copyright Â© Eon Collective LLC 2024. All rights reserved.
# This file is distributed under the same license as the Sphinx Wagtail
# theme package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx Wagtail theme 5.0.0a1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-28 15:26+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

# 5a1660ba4ef24827b1a56f3b3c775fb6
#: ../../examples/rst-page.rst:5
msgid "Page in reStructuredText"
msgstr ""

# 9b6226d676e446d193a8d7812d2cb7b3
#: ../../examples/rst-page.rst:7
msgid ""
"This page is directly from the Wagtail docs. This page is included "
"because as of now (April 2021), the Wagtail docs are not completely "
"converted to Markdown."
msgstr ""

# b5e7366dab5d4fb19172709d349a0d2e
#: ../../examples/rst-page.rst:12
msgid "Overriding the :meth:`~wagtail.core.models.Page.serve` Method"
msgstr ""

# 91fe847557c54e288132e0f054014dba
#: ../../examples/rst-page.rst:14
msgid ""
"Wagtail defaults to serving :class:`~wagtail.core.models.Page`-derived "
"models by passing a reference to the page object to a Django HTML "
"template matching the model's name, but suppose you wanted to serve "
"something other than HTML? You can override the "
":meth:`~wagtail.core.models.Page.serve` method provided by the "
":class:`~wagtail.core.models.Page` class and handle the Django request "
"and response more directly."
msgstr ""

# 121b2fef1cce48baa7a8baa3851de2ef
#: ../../examples/rst-page.rst:16
msgid ""
"Consider this example from the Wagtail demo site's ``models.py``, which "
"serves an ``EventPage`` object as an iCal file if the ``format`` variable"
" is set in the request:"
msgstr ""

# 5b5be3da45b94db182bcea9576e43541
#: ../../examples/rst-page.rst:41
msgid ""
":meth:`~wagtail.core.models.Page.serve` takes a Django request object and"
" returns a Django response object. Wagtail returns a ``TemplateResponse``"
" object with the template and context which it generates, which allows "
"middleware to function as intended, so keep in mind that a simpler "
"response object like a ``HttpResponse`` will not receive these benefits."
msgstr ""

# 84d024f2047e422da4703f6d19411a62
#: ../../examples/rst-page.rst:43
msgid ""
"With this strategy, you could use Django or Python utilities to render "
"your model in JSON or XML or any other format you'd like."
msgstr ""

# e8e348587edb427bb888d24c79014df1
#: ../../examples/rst-page.rst:49
msgid ""
"Adding Endpoints with Custom :meth:`~wagtail.core.models.Page.route` "
"Methods"
msgstr ""

# 80f61399c3e54b29a23f67986e41c258
#: ../../examples/rst-page.rst:53
msgid ""
"A much simpler way of adding more endpoints to pages is provided by the "
":mod:`~wagtail.contrib.routable_page` module."
msgstr ""

# 3180ae0b70774e618b48ca55ebc1cdbd
#: ../../examples/rst-page.rst:55
msgid ""
"Wagtail routes requests by iterating over the path components (separated "
"with a forward slash ``/``), finding matching objects based on their "
"slug, and delegating further routing to that object's model class. The "
"Wagtail source is very instructive in figuring out what's happening. This"
" is the default ``route()`` method of the ``Page`` class:"
msgstr ""

# a42d09f27e474397ae70b75f3db8c186
#: ../../examples/rst-page.rst:87
msgid ""
":meth:`~wagtail.core.models.Page.route` takes the current object "
"(``self``), the ``request`` object, and a list of the remaining "
"``path_components`` from the request URL. It either continues delegating "
"routing by calling :meth:`~wagtail.core.models.Page.route` again on one "
"of its children in the Wagtail tree, or ends the routing process by "
"returning a ``RouteResult`` object or raising a 404 error."
msgstr ""

# 45a08e9403f1404bac39a65c98fe478f
#: ../../examples/rst-page.rst:89
msgid ""
"The ``RouteResult`` object (defined in wagtail.core.url_routing) "
"encapsulates all the information Wagtail needs to call a page's "
":meth:`~wagtail.core.models.Page.serve` method and return a final "
"response: this information consists of the page object, and any "
"additional ``args``/``kwargs`` to be passed to "
":meth:`~wagtail.core.models.Page.serve`."
msgstr ""

# 44dd3ae5f32b45d1b00ff19b846ae81a
#: ../../examples/rst-page.rst:91
msgid ""
"By overriding the :meth:`~wagtail.core.models.Page.route` method, we "
"could create custom endpoints for each object in the Wagtail tree. One "
"use case might be using an alternate template when encountering the "
"``print/`` endpoint in the path. Another might be a REST API which "
"interacts with the current object. Just to see what's involved, lets make"
" a simple model which prints out all of its child path components."
msgstr ""

# 2ae53ad9a5cc46c1ba925030f8f33970
#: ../../examples/rst-page.rst:93
msgid "First, ``models.py``:"
msgstr ""

# ee14aff1c734489a9f0cddb0f1122adb
#: ../../examples/rst-page.rst:124
msgid ""
"This model, ``Echoer``, doesn't define any properties, but does subclass "
"``Page`` so objects will be able to have a custom title and slug. The "
"template just has to display our ``{{ echo }}`` property."
msgstr ""

# 245df64b60c74ffa9f5aca761c2ea428
#: ../../examples/rst-page.rst:126
msgid ""
"Now, once creating a new ``Echoer`` page in the Wagtail admin titled "
"\"Echo Base,\" requests such as::"
msgstr ""

# d740fad2cb1b44b7872548ab884819d0
#: ../../examples/rst-page.rst:130
msgid "Will return::"
msgstr ""

# 9a58b406c4e44748aaf93186bb3fe1d5
#: ../../examples/rst-page.rst:134
msgid ""
"Be careful if you're introducing new required arguments to the "
"``serve()`` method - Wagtail still needs to be able to display a default "
"view of the page for previewing and moderation, and by default will "
"attempt to do this by calling ``serve()`` with a request object and no "
"further arguments. If your ``serve()`` method does not accept that as a "
"method signature, you will need to override the page's "
"``serve_preview()`` method to call ``serve()`` with suitable arguments:"
msgstr ""

# e010e9cb4ee045adb36eff8ec6d12a71
#: ../../examples/rst-page.rst:144
msgid "Tagging"
msgstr ""

# 1e6d3a38c64f403099cc71f9fe370ba0
#: ../../examples/rst-page.rst:146
msgid ""
"Wagtail provides tagging capabilities through the combination of two "
"Django modules, `django-taggit <https://django-taggit.readthedocs.io/>`_ "
"(which provides a general-purpose tagging implementation) and `django-"
"modelcluster <https://github.com/wagtail/django-modelcluster>`_ (which "
"extends django-taggit's ``TaggableManager`` to allow tag relations to be "
"managed in memory without writing to the database - necessary for "
"handling previews and revisions). To add tagging to a page model, you'll "
"need to define a 'through' model inheriting from ``TaggedItemBase`` to "
"set up the many-to-many relationship between django-taggit's ``Tag`` "
"model and your page model, and add a ``ClusterTaggableManager`` accessor "
"to your page model to present this relation as a single tag field."
msgstr ""

# 1e3db09d797a47018e4cccc9b11ec1bd
#: ../../examples/rst-page.rst:148
msgid ""
"In this example, we set up tagging on ``BlogPage`` through a "
"``BlogPageTag`` model:"
msgstr ""

# 042420311b204a5dbbf75e7a3fd9d4a2
#: ../../examples/rst-page.rst:170
msgid ""
"Wagtail's admin provides a nice interface for inputting tags into your "
"content, with typeahead tag completion and friendly tag icons."
msgstr ""

# 2dd7d442869a4280a3aa044e3629b55d
#: ../../examples/rst-page.rst:172
msgid ""
"We can now make use of the many-to-many tag relationship in our views and"
" templates. For example, we can set up the blog's index page to accept a "
"``?tag=...`` query parameter to filter the ``BlogPage`` listing by tag:"
msgstr ""

# 851b981f63a54bd4acceb5bcf6388287
#: ../../examples/rst-page.rst:195
msgid ""
"Here, ``blog_entries.filter(tags__name=tag)`` follows the ``tags`` "
"relation on ``BlogPage``, to filter the listing to only those pages with "
"a matching tag name before passing this to the template for rendering. We"
" can now update the ``blog_page.html`` template to show a list of tags "
"associated with the page, with links back to the filtered index page:"
msgstr ""

# 12bc64795acd4ce897d517e99c524e00
#: ../../examples/rst-page.rst:203
msgid ""
"Iterating through ``page.tags.all`` will display each tag associated with"
" ``page``, while the links back to the index make use of the filter "
"option added to the ``BlogIndexPage`` model. A Django query could also "
"use the ``tagged_items`` related name field to get ``BlogPage`` objects "
"associated with a tag."
msgstr ""

# 1f6d03c358ed4209ac5b3353c883567c
#: ../../examples/rst-page.rst:205
msgid ""
"The same approach can be used to add tagging to non-page models managed "
"through :ref:`snippets` and :doc:`/reference/contrib/modeladmin/index`. "
"In this case, the model must inherit from "
"``modelcluster.models.ClusterableModel`` to be compatible with "
"``ClusterTaggableManager``."
msgstr ""

# d7cd6a6206474fd0bdf97eb6851d1102
#: ../../examples/rst-page.rst:209
msgid "Custom tag models"
msgstr ""

# 4fea703b9ceb46e894916c8af85824ed
#: ../../examples/rst-page.rst:211
msgid ""
"In the above example, any newly-created tags will be added to django-"
"taggit's default ``Tag`` model, which will be shared by all other models "
"using the same recipe as well as Wagtail's image and document models. In "
"particular, this means that the autocompletion suggestions on tag fields "
"will include tags previously added to other models. To avoid this, you "
"can set up a custom tag model inheriting from ``TagBase``, along with a "
"'through' model inheriting from ``ItemBase``, which will provide an "
"independent pool of tags for that page model."
msgstr ""

# 2b10607391694f2c8559cc4776b9b802
#: ../../examples/rst-page.rst:240
msgid ""
"Within the admin, the tag field will automatically recognise the custom "
"tag model being used, and will offer autocomplete suggestions taken from "
"that tag model."
msgstr ""

# 1bc0b008f6d24386abdf797e0b409239
#: ../../examples/rst-page.rst:244
msgid "Disabling free tagging"
msgstr ""

# d84de65e0b114fbca21967ce605d2eb4
#: ../../examples/rst-page.rst:246
msgid ""
"By default, tag fields work on a \"free tagging\" basis: editors can "
"enter anything into the field, and upon saving, any tag text not "
"recognised as an existing tag will be created automatically. To disable "
"this behaviour, and only allow editors to enter tags that already exist "
"in the database, custom tag models accept a ``free_tagging = False`` "
"option:"
msgstr ""

# ed6dbe43694e4b3db37a6b7fa70fba22
#: ../../examples/rst-page.rst:261
msgid ""
"Here we have registered ``BlogTag`` as a snippet, to provide an interface"
" for administrators (and other users with the appropriate permissions) to"
" manage the allowed set of tags. With the ``free_tagging = False`` option"
" set, editors can no longer enter arbitrary text into the tag field, and "
"must instead select existing tags from the autocomplete dropdown."
msgstr ""

# 5d0f16a4ff4447ce8857422d8c46b2af
#: ../../examples/rst-page.rst:266
msgid "Have redirects created automatically when changing page slug"
msgstr ""

# 911f1adc4434493abcd87d229d456b37
#: ../../examples/rst-page.rst:268
msgid ""
"You may want redirects created automatically when a url gets changed in "
"the admin so as to avoid broken links. You can add something like the "
"following block to a ``wagtail_hooks.py`` file within one of your "
"project's apps."
msgstr ""

# 3b511298b0434bbb89aacacd835c9810
#: ../../examples/rst-page.rst:288
msgid ""
"Note: This does not work in some cases e.g. when you redirect a page, "
"create a new page in that url and then move the new one. It should be "
"helpful in most cases however."
msgstr ""

